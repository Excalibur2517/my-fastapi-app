from fastapi import FastAPI, HTTPException, Query
import mysql.connector
from typing import Optional, List
from mysql.connector import Error
import random


# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î MySQL
db_config = {
    'host': '83.166.232.67',
    'user': 'test_user',
    'password': 'Projectbd12345.!',
    'database': 'MySQL-6549'
}

app = FastAPI(title="Films API")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
def get_db_connection():
    conn = mysql.connector.connect(**db_config)
    return conn

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
def root():
    return {"message": "Hello! This is Films API."}


#
# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 20 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ —Ç–æ–ø-200 –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 20 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ —Ç–æ–ø-200 –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
@app.get("/films/random_top200/")
def get_random_top_200_films():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 20 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ —Ç–æ–ø-200 –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏.
    –ü–æ–ª—è: id, name, poster_cloud.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-200 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        cursor.execute("""
            SELECT id, name, poster_cloud
            FROM films
            WHERE m_or_ser = 'movie'
            AND CHAR_LENGTH(name) <= 25
            ORDER BY popularity DESC
            LIMIT 300
        """)
        films = cursor.fetchall()

        if not films:
            raise HTTPException(status_code=404, detail="–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ë–µ—Ä–µ–º 20 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø-200
        random_films = random.sample(films, 20)

        return random_films
    except mysql.connector.Error as err:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞: {err}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        cursor.close()
        conn.close()
# üöÄ –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
@app.get("/films/main_screen_movies", response_model=List[dict])
def get_main_screen_films():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø–æ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã films_main_screen
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∏–º—è, –ø–æ—Å—Ç–µ—Ä –∏ ID.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ñ–∏–ª—å–º–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        cursor.execute("""
            SELECT f.id, f.name, f.poster_cloud
            FROM films_main_screen ms
            JOIN films f ON ms.id = f.id
        """)
        rows = cursor.fetchall()
        
        if not rows:
            raise HTTPException(status_code=404, detail="No films found")
        
        return rows
    except Error as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        cursor.close()
        conn.close()

@app.get("/films/advanced-filter/")
def advanced_filter(
    genres: Optional[str] = Query(None, description="–ñ–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"),
    countries: Optional[str] = Query(None, description="–°—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"),
    year_from: Optional[int] = Query(None, ge=1874, le=2025, description="–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –æ—Ç"),
    year_to: Optional[int] = Query(None, ge=1874, le=2025, description="–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –¥–æ"),
    kp_from: Optional[float] = Query(None, ge=0, le=10, description="–†–µ–π—Ç–∏–Ω–≥ –ö–ü –æ—Ç"),
    kp_to: Optional[float] = Query(None, ge=0, le=10, description="–†–µ–π—Ç–∏–Ω–≥ –ö–ü –¥–æ"),
    imdb_from: Optional[float] = Query(None, ge=0, le=10, description="–†–µ–π—Ç–∏–Ω–≥ IMDb –æ—Ç"),
    imdb_to: Optional[float] = Query(None, ge=0, le=10, description="–†–µ–π—Ç–∏–Ω–≥ IMDb –¥–æ"),
    critics_from: Optional[float] = Query(None, ge=0, le=10, description="–†–µ–π—Ç–∏–Ω–≥ –∫—Ä–∏—Ç–∏–∫–æ–≤ –æ—Ç"),
    critics_to: Optional[float] = Query(None, ge=0, le=10, description="–†–µ–π—Ç–∏–Ω–≥ –∫—Ä–∏—Ç–∏–∫–æ–≤ –¥–æ"),
    boxoffice_from: Optional[int] = Query(None, ge=0, le=2923710000, description="–°–±–æ—Ä—ã –æ—Ç"),
    boxoffice_to: Optional[int] = Query(None, ge=0, le=2923710000, description="–°–±–æ—Ä—ã –¥–æ"),
    budget_from: Optional[int] = Query(None, ge=0, le=400000000, description="–ë—é–¥–∂–µ—Ç –æ—Ç"),
    budget_to: Optional[int] = Query(None, ge=0, le=400000000, description="–ë—é–¥–∂–µ—Ç –¥–æ"),
    duration_from: Optional[int] = Query(None, ge=0, le=600, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç"),
    duration_to: Optional[int] = Query(None, ge=0, le=600, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ"),
    age_from: Optional[int] = Query(None, ge=0, le=18, description="–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç"),
    age_to: Optional[int] = Query(None, ge=0, le=18, description="–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ"),
    sort_by: Optional[str] = Query("popularity", description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: popularity, rating_all –∏–ª–∏ year_prem")
):
    filters = ["m_or_ser = 'movie'"]  # –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã
    params = []

    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not genres or "–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞" not in genres:
        filters.append("films.id NOT IN (SELECT id_film FROM films_genre_link WHERE id_genre IN (SELECT id FROM films_genre WHERE genre = '–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞'))")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    def add_filter(field, from_value, to_value):
        if from_value is not None:
            filters.append(f"{field} >= %s")
            params.append(from_value)
        if to_value is not None:
            filters.append(f"{field} <= %s")
            params.append(to_value)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    add_filter("year_prem", year_from, year_to)
    add_filter("rating_kp", kp_from, kp_to)
    add_filter("rating_imdb", imdb_from, imdb_to)
    add_filter("rating_critics", critics_from, critics_to)
    add_filter("boxoffice_dollar", boxoffice_from, boxoffice_to)
    add_filter("budget_dollar", budget_from, budget_to)
    add_filter("timing_m", duration_from, duration_to)
    add_filter("age", age_from, age_to)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä–∞–º
    if genres:
        genre_list = genres.split(",")
        genre_placeholders = ", ".join(["%s"] * len(genre_list))
        filters.append(f"films.id IN (SELECT DISTINCT id_film FROM films_genre_link WHERE id_genre IN (SELECT id FROM films_genre WHERE genre IN ({genre_placeholders})))")
        params.extend(genre_list)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    if countries:
        country_list = countries.split(",")
        country_placeholders = ", ".join(["%s"] * len(country_list))
        filters.append(f"films.id IN (SELECT DISTINCT id_film FROM films_country_link WHERE id_country IN (SELECT id FROM films_country WHERE country IN ({country_placeholders})))")
        params.extend(country_list)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    valid_sort_columns = ["popularity", "rating_all", "year_prem"]
    if sort_by not in valid_sort_columns:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sort_by")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å
    query = f"""
        SELECT DISTINCT films.*
        FROM films
        WHERE {" AND ".join(filters)}
        ORDER BY {sort_by} DESC
        LIMIT 100
    """

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        cursor.execute(query, params)
        rows = cursor.fetchall()
        return rows
    finally:
        cursor.close()
        conn.close()


# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø–æ ID
@app.get("/films/search_film_by_id/{film_id}")
def get_film_by_id(film_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ (id, rating_kp, rating_imdb, genre, country, name, description)
    –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É film_id.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        sql = """
        SELECT 
            id, 
            boxoffice_dollar,
            rating_kp, 
            rating_imdb,
            rating_critics,
            year_prem,
            poster_cloud, 
            genre, 
            country, 
            name,
            description,
            directors,
            actors,
            budget_dollar,
            age
        FROM films
        WHERE id = %s
        """
        cursor.execute(sql, (film_id,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Film not found")
        return row
    finally:
        cursor.close()
        conn.close()

# –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –ø–æ–¥–±–æ—Ä–æ–∫
@app.get("/films/blocks_of_collection/", response_model=List[dict])
def get_films_collections():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã films_collection_blocks —Å –ø–æ–ª—è–º–∏ name –∏ poster.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT id,name, poster FROM films_collection_blocks")
        rows = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not rows:
            raise HTTPException(status_code=404, detail="No collection blocks found")
        
        return rows
    except Error as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        cursor.close()
        conn.close()


# –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ ID –±–ª–æ–∫–∞
@app.get("/films/single_block_by_id/{block_id}", response_model=List[dict])
def get_films_by_block_id(block_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã films_collections, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É block_id.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ block_id
        cursor.execute("""
            SELECT id, block_id, name, poster 
            FROM films_collections 
            WHERE block_id = %s
        """, (block_id,))
        
        rows = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not rows:
            raise HTTPException(status_code=404, detail=f"No films found for block_id {block_id}")
        
        return rows
    except Error as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        cursor.close()
        conn.close()


# –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10 —Ñ–∏–ª—å–º–æ–≤ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ name
@app.get("/films/10_shortest_collections_list/", response_model=List[dict])
def get_shortest_names():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 10 —Ñ–∏–ª—å–º–æ–≤ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–ª–µ name.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10 —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–ª–µ name
        cursor.execute("""
            SELECT id, name, poster 
            FROM films_collections 
            ORDER BY LENGTH(name) ASC
            LIMIT 10
        """)
        
        rows = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not rows:
            raise HTTPException(status_code=404, detail="No films found")
        
        return rows
    except Error as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        cursor.close()
        conn.close()

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ ID –ø–æ–¥–±–æ—Ä–∫–∏
@app.get("/films/collections_info/{collection_id}", response_model=List[dict])
def get_films_by_collection(collection_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–µ.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ ID –ø–æ–¥–±–æ—Ä–∫–∏
        cursor.execute("""
            SELECT f.id,f.name,f.country,f.rating_kp,f.rating_imdb,f.rating_critics,f.genre,f.poster_cloud,f.year_prem
            FROM films f
            JOIN films_collection_link cl ON f.id = cl.films_id
            WHERE cl.collection_id = %s
        """, (collection_id,))
        
        films = cursor.fetchall()

        if not films:
            raise HTTPException(status_code=404, detail="–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–∏")
        
        return films
    except Error as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        cursor.close()
        conn.close()

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@app.get("/films/search_film_by_name/{search_text}", response_model=List[dict])
def search_film_by_name(search_text: str):
    """
    –ò—â–µ—Ç —Ñ–∏–ª—å–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 20 –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ popularity.
    """
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        query = """
            SELECT id, name, poster_cloud, popularity,rating_kp,rating_imdb,rating_critics,genre,country,year_prem
            FROM films
            WHERE m_or_ser = 'movie' AND name LIKE %s
            ORDER BY popularity DESC
            LIMIT 20
        """
        cursor.execute(query, (f"%{search_text}%",))
        films = cursor.fetchall()

        if not films:
            raise HTTPException(status_code=404, detail="–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return films
    except Error as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        cursor.close()
        conn.close()


# –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É
@app.get("/films/by_genre/")
def get_films_by_genre(
    genre: str,
    offset: int = 0,
    limit: int = 20,
    sort_by: str = "popularity"
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    –ò—Å–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å–º—ã –∂–∞–Ω—Ä–∞ '–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞', –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —è–≤–Ω–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è sort_by
    valid_sort_columns = ["popularity", "rating_all", "year_prem"]
    if sort_by not in valid_sort_columns:
        raise HTTPException(status_code=400, detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sort_by. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {valid_sort_columns}")

    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∂–∞–Ω—Ä–∞
        query = f"""
            SELECT DISTINCT f.id, f.name, f.poster_cloud, f.popularity, f.rating_kp, f.rating_imdb, 
                            f.rating_critics, f.genre, f.country, f.year_prem, f.rating_all
            FROM films f
            JOIN films_genre_link fgl ON f.id = fgl.id_film
            JOIN films_genre fg ON fgl.id_genre = fg.id
            WHERE fg.genre = %s
            AND f.m_or_ser = 'movie' AND year_prem < 2025
        """

        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–µ–∫, –µ—Å–ª–∏ –∂–∞–Ω—Ä –Ω–µ "–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞"
        if genre.lower() != "–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞":
            query += """
                AND f.id NOT IN (
                    SELECT id_film
                    FROM films_genre_link
                    WHERE id_genre = (SELECT id FROM films_genre WHERE genre = '–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞')
                )
            """

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –ª–∏–º–∏—Ç –∏ –æ—Ñ—Å–µ—Ç
        query += f" ORDER BY f.{sort_by} DESC LIMIT %s OFFSET %s"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        cursor.execute(query, (genre, limit, offset))
        rows = cursor.fetchall()

        if not rows:
            raise HTTPException(status_code=404, detail="–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞")

        return rows
    except Error as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        cursor.close()
        conn.close()
